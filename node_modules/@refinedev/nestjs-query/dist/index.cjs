var P=Object.create;var F=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var G=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var U=(i,r)=>{for(var n in r)F(i,n,{get:r[n],enumerable:!0})},B=(i,r,n,e)=>{if(r&&typeof r=="object"||typeof r=="function")for(let t of A(r))!T.call(i,t)&&t!==n&&F(i,t,{get:()=>r[t],enumerable:!(e=k(r,t))||e.enumerable});return i};var C=(i,r,n)=>(n=i!=null?P(G(i)):{},B(r||!i||!i.__esModule?F(n,"default",{value:i,enumerable:!0}):n,i)),j=i=>B(F({},"__esModule",{value:!0}),i);var ee={};U(ee,{GraphQLClient:()=>g.GraphQLClient,batchRequests:()=>g.batchRequests,default:()=>m,gql:()=>g.gql,graphqlWS:()=>te,liveProvider:()=>Z,qqlQueryBuilder:()=>re,rawRequest:()=>g.rawRequest,request:()=>g.request,resolveRequestDocument:()=>g.resolveRequestDocument});module.exports=j(ee);var p=C(require("camelcase")),$=C(require("gql-query-builder")),R=C(require("graphql-tag")),f=require("pluralize");var y=C(require("camelcase")),h=C(require("gql-query-builder")),M=C(require("lodash/set")),b=require("pluralize");var L=require("graphql"),z=i=>{var r,n;return(n=(r=i==null?void 0:i.selectionSet)==null?void 0:r.selections)==null?void 0:n.find(e=>e.kind==="Field"&&e.name.value==="nodes")},w=i=>{let r=[],n=!0,e=0,t=!1;return(0,L.visit)(i,{Field:{enter(s){if(n){n=!1;let u=z(s)??s;if(typeof u.selectionSet>"u")throw new Error("Operation must have a selection set");return u.selectionSet}r.push(`${e>0?"  ".repeat(t?e:e-1):""}${s.name.value}${s.selectionSet?" {":""}`),s.selectionSet&&(e++,t=!0)},leave(s){s.selectionSet&&(e--,r.push(`${"  ".repeat(e)}}`),t=!1)}}}),r.join(`
`).trim()},Q=i=>{let r=!1;return(0,L.visit)(i,{OperationDefinition:{enter(n){n.operation==="mutation"&&(r=!0)}}}),r};var N=(i,{callback:r,params:n,meta:e},t)=>{let s={created:J,updated:K,deleted:X},{resource:o,filters:u,subscriptionType:l,id:a,ids:d}=n??{},q=s[t],{operation:c,query:O,variables:S,operationName:V}=q({ids:d,id:a,resource:o,filters:u,meta:e,subscriptionType:l}),I=E=>{r(E.data[c])};return i.subscribe({query:O,variables:S,operationName:V},{next:I,error:console.error,complete:()=>null})},W={eq:"eq",ne:"neq",lt:"lt",gt:"gt",lte:"lte",gte:"gte",in:"in",nin:"notIn"},H=(i,r)=>{if(i==="contains")return{iLike:`%${r}%`};if(i==="ncontains")return{notILike:`%${r}%`};if(i==="startswith")return{iLike:`${r}%`};if(i==="nstartswith")return{notILike:`${r}%`};if(i==="endswith")return{iLike:`%${r}`};if(i==="nendswith")return{notILike:`%${r}`};if(i==="null")return{is:null};if(i==="nnull")return{isNot:null};if(i==="between"){if(!Array.isArray(r))throw new Error("Between operator requires an array");return r.length!==2?{}:{between:{lower:r[0],upper:r[1]}}}return{[W[i]]:r}},v=i=>{let r={};return i.filter(n=>Array.isArray(n.value)&&n.value.length===0?!1:!!n.value).map(n=>n.operator==="and"||n.operator==="or"?(0,M.default)(r,n.operator,[v(n.value)]):"field"in n?(0,M.default)(r,n.field,H(n.operator,n.value)):{}),r},x=i=>i.map(r=>({field:r.field,direction:r.order.toUpperCase()})),_=i=>{if(i.mode==="off")return{limit:2147483647};if(i.mode==="server"&&!(!i.current||!i.pageSize))return{limit:i.pageSize,offset:(i.current-1)*i.pageSize}},J=({resource:i,filters:r,meta:n})=>{let e=(n==null?void 0:n.gqlQuery)??(n==null?void 0:n.gqlMutation);if(e){let l=(0,y.default)((0,b.singular)(i),{pascalCase:!0}),a=`Created${l}`,d=`created${l}`,q=`
            subscription ${a}($input: Create${l}SubscriptionFilterInput) {
                ${d}(input: $input) {
                    ${w(e)}
                }
            }
        `,c={};return r&&(c.input={filter:v(r.filter(O=>!O.field.includes(".")))}),{query:q,variables:c,operation:d,operationName:a}}let t=`created${(0,y.default)((0,b.singular)(i),{pascalCase:!0})}`,s={};r&&(s.input={type:(0,y.default)(`create_${(0,b.singular)(i)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:v(r.filter(l=>!l.field.includes(".")))}});let{query:o,variables:u}=h.subscription({operation:t,fields:n.fields,variables:s});return{query:o,variables:u,operation:t}},K=({id:i,resource:r,filters:n,meta:e})=>{let t=(e==null?void 0:e.gqlQuery)??(e==null?void 0:e.gqlMutation);if(t){let a=(0,y.default)((0,b.singular)(r),{pascalCase:!0}),d=`Updated${a}`,q=`updatedOne${a}`,c=`
            subscription ${d}($input: UpdateOne${a}SubscriptionFilterInput) {
                ${q}(input: $input) {
                   ${w(t)}
                }
            }
        `,O={};return n&&(O.input={filter:v(n.filter(S=>!S.field.includes(".")))}),i&&(O.input={filter:{id:{eq:i}}}),{query:c,variables:O,operation:q,operationName:d}}let s=`updatedOne${(0,y.default)((0,b.singular)(r),{pascalCase:!0})}`,o={};n&&(o.input={type:(0,y.default)(`update_one_${(0,b.singular)(r)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:v(n.filter(a=>!a.field.includes(".")))}}),i&&(o.input={type:(0,y.default)(`update_one_${(0,b.singular)(r)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:{id:{eq:i}}}});let{query:u,variables:l}=h.subscription({operation:s,fields:e.fields,variables:o});return{query:u,variables:l,operation:s}},X=({resource:i,filters:r,meta:n})=>{if(n!=null&&n.gqlQuery){let u=(0,y.default)((0,b.singular)(i),{pascalCase:!0}),l=`Deleted${u}`,a=`deletedOne${u}`,d=`
            subscription ${l}($input: DeleteOne${u}SubscriptionFilterInput) {
                ${a}(input: $input) {
                    id
                }
            }
        `,q={};return r&&(q.input={filter:v(r.filter(c=>!c.field.includes(".")))}),{query:d,variables:q,operation:a,operationName:l}}let e=`deletedOne${(0,y.default)((0,b.singular)(i),{pascalCase:!0})}`,t={};r&&(t.input={type:(0,y.default)(`delete_one_${(0,b.singular)(i)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:v(r.filter(u=>!u.field.includes(".")))}});let{query:s,variables:o}=h.subscription({operation:e,fields:n.fields.filter(u=>typeof u!="object"),variables:t});return{query:s,variables:o,operation:e}};var Y=i=>({getList:async({resource:r,pagination:n,sorters:e,filters:t,meta:s})=>{let o=(0,p.default)(r),u=_(n||{}),l={},a,d;if(s!=null&&s.gqlQuery)a=s==null?void 0:s.gqlQuery,d={filter:t?v(t):{},sorting:e?x(e):[],paging:u};else{t&&(l.filter={type:(0,p.default)(`${(0,f.singular)(r)}Filter`,{pascalCase:!0}),required:!0,value:v(t)}),e&&(l.sorting={type:(0,p.default)(`${(0,f.singular)(r)}Sort`,{pascalCase:!0}),required:!0,list:[!0],value:x(e)}),u&&(l.paging={type:"OffsetPaging",required:!0,value:u});let c=$.query({operation:o,fields:[{nodes:s==null?void 0:s.fields},"totalCount"],variables:l});a=c.query,d=c.variables}let q=await i.request(a,d);return{data:q[o].nodes,total:q[o].totalCount}},getMany:async({resource:r,ids:n,meta:e})=>{let t=(0,p.default)(r);if(e!=null&&e.gqlQuery)return{data:(await i.request(e.gqlQuery,{filter:{id:{in:n}}}))[t].nodes};let{query:s,variables:o}=$.query({operation:t,fields:[{nodes:(e==null?void 0:e.fields)||["id"]}],variables:{filter:{type:(0,p.default)(`${(0,f.singular)(r)}Filter`,{pascalCase:!0}),required:!0,value:{id:{in:n}}}}});return{data:(await i.request(s,o))[t].nodes}},create:async({resource:r,variables:n,meta:e})=>{let t=`createOne${(0,p.default)((0,f.singular)(r),{pascalCase:!0})}`,s=(e==null?void 0:e.gqlMutation)??(e==null?void 0:e.gqlQuery);if(s)return{data:(await i.request(s,{input:{[(0,p.default)((0,f.singular)(r))]:n}}))[t]};let{query:o,variables:u}=$.mutation({operation:t,fields:(e==null?void 0:e.fields)||["id"],variables:{input:{type:`CreateOne${(0,p.default)((0,f.singular)(r),{pascalCase:!0})}Input`,required:!0,value:{[(0,p.default)((0,f.singular)(r))]:n}}}});return{data:(await i.request(o,u))[t]}},createMany:async({resource:r,variables:n,meta:e})=>{let s=`createMany${(0,p.default)(r,{pascalCase:!0})}`,o=(e==null?void 0:e.gqlMutation)??(e==null?void 0:e.gqlQuery);if(o)return{data:(await i.request(o,{input:{[(0,p.default)(r)]:n}}))[s]};let{query:u,variables:l}=$.mutation({operation:s,fields:(e==null?void 0:e.fields)||["id"],variables:{input:{type:`CreateMany${(0,p.default)(r,{pascalCase:!0})}Input`,required:!0,value:{[(0,p.default)(r)]:n}}}});return{data:(await i.request(u,l))[s]}},update:async({resource:r,id:n,variables:e,meta:t})=>{let s=`updateOne${(0,p.default)((0,f.singular)(r),{pascalCase:!0})}`,o=(t==null?void 0:t.gqlMutation)??(t==null?void 0:t.gqlQuery);if(o)return{data:(await i.request(o,{input:{id:n,update:e}}))[s]};let{query:u,variables:l}=$.mutation({operation:s,fields:(t==null?void 0:t.fields)||["id"],variables:{input:{type:`UpdateOne${(0,p.default)((0,f.singular)(r),{pascalCase:!0})}Input`,required:!0,value:{id:n,update:e}}}});return{data:(await i.request(u,l))[s]}},updateMany:async({resource:r,ids:n,variables:e,meta:t})=>{let s=(0,p.default)(r,{pascalCase:!0}),o=`updateMany${s}`,u=R.default`
                mutation UpdateMany${s}($input: UpdateMany${s}Input!) {
                    ${o}(input: $input) {
                        updatedCount
                    }
                }
            `;await i.request(u,{input:{filter:{id:{in:n}},update:e}});let l=(0,p.default)(r),a,d;if(t!=null&&t.fields){let c=$.query({operation:l,fields:[{nodes:(t==null?void 0:t.fields)||["id"]}],variables:{filter:{type:(0,p.default)(`${(0,f.singular)(r)}Filter`,{pascalCase:!0}),required:!0,value:{id:{in:n}}}}});a=c.query,d=c.variables}else a=R.default`
                    query GetMany${s}($filter: ${(0,f.singular)(s)}Filter!) {
                        ${l}(filter: $filter) {
                            nodes {
                                id
                            }
                        }
                    }
                `,d={filter:{id:{in:n}}};return{data:(await i.request(a,d))[l].nodes}},getOne:async({resource:r,id:n,meta:e})=>{let t=(0,p.default)((0,f.singular)(r)),s=(e==null?void 0:e.gqlQuery)??(e==null?void 0:e.gqlMutation);if(s){let a=s,d={id:n};if(Q(s)){let c=w(s);a=R.default`
                        query Get${(0,p.default)((0,f.singular)(r),{pascalCase:!0})}($id: ID!) {
                            ${t}(id: $id) {
                            ${c}
                            }
                        }
                    `}return{data:(await i.request(a,d))[t]}}let{query:o,variables:u}=$.query({operation:t,fields:(e==null?void 0:e.fields)||["id"],variables:{id:{type:"ID",required:!0,value:n}}});return{data:(await i.request(o,u))[t]}},deleteOne:async({resource:r,id:n,meta:e})=>{let t=(0,p.default)((0,f.singular)(r),{pascalCase:!0}),s=`deleteOne${t}`;if(e!=null&&e.gqlMutation)return{data:(await i.request(e.gqlMutation,{input:{id:n}}))[s]};let o=R.default`
                    mutation DeleteOne${t}($input: DeleteOne${t}Input!) {
                        ${s}(input: $input) {
                            id
                        }
                    }
                `;return{data:(await i.request(o,{input:{id:n}}))[s]}},deleteMany:async({resource:r,ids:n})=>{let e=(0,p.default)(r,{pascalCase:!0}),t=`deleteMany${e}`,s=R.default`
                mutation DeleteMany${e}($input: DeleteMany${e}Input!) {
                    ${t}(input: $input) {
                        deletedCount
                    }
                }
            `,o={input:{filter:{id:{in:n}}}};return await i.request(s,o),{data:[]}},getApiUrl:()=>{throw Error("Not implemented on refine-nestjs-query data provider.")},custom:async({url:r,method:n,headers:e,meta:t})=>{r&&i.setEndpoint(r),e&&i.setHeaders(e);let s=(t==null?void 0:t.gqlMutation)??(t==null?void 0:t.gqlQuery);if(s)return{data:await i.request(s,(t==null?void 0:t.variables)??{})};if(t!=null&&t.rawQuery)return{data:await i.request(t.rawQuery,t.variables)};if(t){if(t.operation){let o,u;if(n==="get"){let a=$.query({operation:t.operation,fields:t.fields,variables:t.variables});o=a.query,u=a.variables}else{let a=$.mutation({operation:t.operation,fields:t.fields,variables:t.variables});o=a.query,u=a.variables}return{data:(await i.request(o,u))[t.operation]}}throw Error("GraphQL operation name required.")}throw Error("GraphQL needs operation, fields and variables values in meta object.")}}),D=Y;var Z=i=>{let r=(n,e,t,s,o,u,l)=>{let a=N(n,{callback:e,params:t,meta:s},o);l.push(a)};return{subscribe({callback:n,params:e,meta:t}){let{resource:s,subscriptionType:o}=e??{};if(!t||!o||!s)throw new Error("[useSubscription]: `meta`, `subscriptionType` and `resource` are required in `params` for graphql subscriptions");let u=[];return(e==null?void 0:e.subscriptionType)==="useList"&&["created","updated","deleted"].forEach(a=>r(i,n,e,t,a,s,u)),(e==null?void 0:e.subscriptionType)==="useOne"&&r(i,n,e,t,"updated",s,u),()=>{u.forEach(a=>a())}},unsubscribe(n){n()}}};var re=C(require("gql-query-builder")),g=require("graphql-request"),te=C(require("graphql-ws")),m=D;
//# sourceMappingURL=index.cjs.map