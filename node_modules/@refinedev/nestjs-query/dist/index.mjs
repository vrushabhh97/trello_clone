import p from"camelcase";import*as g from"gql-query-builder";import O from"graphql-tag";import{singular as q}from"pluralize";import y from"camelcase";import*as R from"gql-query-builder";import L from"lodash/set";import{singular as b}from"pluralize";import{visit as h}from"graphql";var D=n=>{var t,i;return(i=(t=n==null?void 0:n.selectionSet)==null?void 0:t.selections)==null?void 0:i.find(e=>e.kind==="Field"&&e.name.value==="nodes")},C=n=>{let t=[],i=!0,e=0,r=!1;return h(n,{Field:{enter(s){if(i){i=!1;let u=D(s)??s;if(typeof u.selectionSet>"u")throw new Error("Operation must have a selection set");return u.selectionSet}t.push(`${e>0?"  ".repeat(r?e:e-1):""}${s.name.value}${s.selectionSet?" {":""}`),s.selectionSet&&(e++,r=!0)},leave(s){s.selectionSet&&(e--,t.push(`${"  ".repeat(e)}}`),r=!1)}}}),t.join(`
`).trim()},S=n=>{let t=!1;return h(n,{OperationDefinition:{enter(i){i.operation==="mutation"&&(t=!0)}}}),t};var M=(n,{callback:t,params:i,meta:e},r)=>{let s={created:E,updated:P,deleted:k},{resource:o,filters:u,subscriptionType:l,id:a,ids:d}=i??{},f=s[r],{operation:c,query:v,variables:w,operationName:Q}=f({ids:d,id:a,resource:o,filters:u,meta:e,subscriptionType:l}),N=_=>{t(_.data[c])};return n.subscribe({query:v,variables:w,operationName:Q},{next:N,error:console.error,complete:()=>null})},V={eq:"eq",ne:"neq",lt:"lt",gt:"gt",lte:"lte",gte:"gte",in:"in",nin:"notIn"},I=(n,t)=>{if(n==="contains")return{iLike:`%${t}%`};if(n==="ncontains")return{notILike:`%${t}%`};if(n==="startswith")return{iLike:`${t}%`};if(n==="nstartswith")return{notILike:`${t}%`};if(n==="endswith")return{iLike:`%${t}`};if(n==="nendswith")return{notILike:`%${t}`};if(n==="null")return{is:null};if(n==="nnull")return{isNot:null};if(n==="between"){if(!Array.isArray(t))throw new Error("Between operator requires an array");return t.length!==2?{}:{between:{lower:t[0],upper:t[1]}}}return{[V[n]]:t}},$=n=>{let t={};return n.filter(i=>Array.isArray(i.value)&&i.value.length===0?!1:!!i.value).map(i=>i.operator==="and"||i.operator==="or"?L(t,i.operator,[$(i.value)]):"field"in i?L(t,i.field,I(i.operator,i.value)):{}),t},F=n=>n.map(t=>({field:t.field,direction:t.order.toUpperCase()})),x=n=>{if(n.mode==="off")return{limit:2147483647};if(n.mode==="server"&&!(!n.current||!n.pageSize))return{limit:n.pageSize,offset:(n.current-1)*n.pageSize}},E=({resource:n,filters:t,meta:i})=>{let e=(i==null?void 0:i.gqlQuery)??(i==null?void 0:i.gqlMutation);if(e){let l=y(b(n),{pascalCase:!0}),a=`Created${l}`,d=`created${l}`,f=`
            subscription ${a}($input: Create${l}SubscriptionFilterInput) {
                ${d}(input: $input) {
                    ${C(e)}
                }
            }
        `,c={};return t&&(c.input={filter:$(t.filter(v=>!v.field.includes(".")))}),{query:f,variables:c,operation:d,operationName:a}}let r=`created${y(b(n),{pascalCase:!0})}`,s={};t&&(s.input={type:y(`create_${b(n)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:$(t.filter(l=>!l.field.includes(".")))}});let{query:o,variables:u}=R.subscription({operation:r,fields:i.fields,variables:s});return{query:o,variables:u,operation:r}},P=({id:n,resource:t,filters:i,meta:e})=>{let r=(e==null?void 0:e.gqlQuery)??(e==null?void 0:e.gqlMutation);if(r){let a=y(b(t),{pascalCase:!0}),d=`Updated${a}`,f=`updatedOne${a}`,c=`
            subscription ${d}($input: UpdateOne${a}SubscriptionFilterInput) {
                ${f}(input: $input) {
                   ${C(r)}
                }
            }
        `,v={};return i&&(v.input={filter:$(i.filter(w=>!w.field.includes(".")))}),n&&(v.input={filter:{id:{eq:n}}}),{query:c,variables:v,operation:f,operationName:d}}let s=`updatedOne${y(b(t),{pascalCase:!0})}`,o={};i&&(o.input={type:y(`update_one_${b(t)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:$(i.filter(a=>!a.field.includes(".")))}}),n&&(o.input={type:y(`update_one_${b(t)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:{id:{eq:n}}}});let{query:u,variables:l}=R.subscription({operation:s,fields:e.fields,variables:o});return{query:u,variables:l,operation:s}},k=({resource:n,filters:t,meta:i})=>{if(i!=null&&i.gqlQuery){let u=y(b(n),{pascalCase:!0}),l=`Deleted${u}`,a=`deletedOne${u}`,d=`
            subscription ${l}($input: DeleteOne${u}SubscriptionFilterInput) {
                ${a}(input: $input) {
                    id
                }
            }
        `,f={};return t&&(f.input={filter:$(t.filter(c=>!c.field.includes(".")))}),{query:d,variables:f,operation:a,operationName:l}}let e=`deletedOne${y(b(n),{pascalCase:!0})}`,r={};t&&(r.input={type:y(`delete_one_${b(n)}_subscription_filter_input`,{pascalCase:!0}),required:!0,value:{filter:$(t.filter(u=>!u.field.includes(".")))}});let{query:s,variables:o}=R.subscription({operation:e,fields:i.fields.filter(u=>typeof u!="object"),variables:r});return{query:s,variables:o,operation:e}};var A=n=>({getList:async({resource:t,pagination:i,sorters:e,filters:r,meta:s})=>{let o=p(t),u=x(i||{}),l={},a,d;if(s!=null&&s.gqlQuery)a=s==null?void 0:s.gqlQuery,d={filter:r?$(r):{},sorting:e?F(e):[],paging:u};else{r&&(l.filter={type:p(`${q(t)}Filter`,{pascalCase:!0}),required:!0,value:$(r)}),e&&(l.sorting={type:p(`${q(t)}Sort`,{pascalCase:!0}),required:!0,list:[!0],value:F(e)}),u&&(l.paging={type:"OffsetPaging",required:!0,value:u});let c=g.query({operation:o,fields:[{nodes:s==null?void 0:s.fields},"totalCount"],variables:l});a=c.query,d=c.variables}let f=await n.request(a,d);return{data:f[o].nodes,total:f[o].totalCount}},getMany:async({resource:t,ids:i,meta:e})=>{let r=p(t);if(e!=null&&e.gqlQuery)return{data:(await n.request(e.gqlQuery,{filter:{id:{in:i}}}))[r].nodes};let{query:s,variables:o}=g.query({operation:r,fields:[{nodes:(e==null?void 0:e.fields)||["id"]}],variables:{filter:{type:p(`${q(t)}Filter`,{pascalCase:!0}),required:!0,value:{id:{in:i}}}}});return{data:(await n.request(s,o))[r].nodes}},create:async({resource:t,variables:i,meta:e})=>{let r=`createOne${p(q(t),{pascalCase:!0})}`,s=(e==null?void 0:e.gqlMutation)??(e==null?void 0:e.gqlQuery);if(s)return{data:(await n.request(s,{input:{[p(q(t))]:i}}))[r]};let{query:o,variables:u}=g.mutation({operation:r,fields:(e==null?void 0:e.fields)||["id"],variables:{input:{type:`CreateOne${p(q(t),{pascalCase:!0})}Input`,required:!0,value:{[p(q(t))]:i}}}});return{data:(await n.request(o,u))[r]}},createMany:async({resource:t,variables:i,meta:e})=>{let s=`createMany${p(t,{pascalCase:!0})}`,o=(e==null?void 0:e.gqlMutation)??(e==null?void 0:e.gqlQuery);if(o)return{data:(await n.request(o,{input:{[p(t)]:i}}))[s]};let{query:u,variables:l}=g.mutation({operation:s,fields:(e==null?void 0:e.fields)||["id"],variables:{input:{type:`CreateMany${p(t,{pascalCase:!0})}Input`,required:!0,value:{[p(t)]:i}}}});return{data:(await n.request(u,l))[s]}},update:async({resource:t,id:i,variables:e,meta:r})=>{let s=`updateOne${p(q(t),{pascalCase:!0})}`,o=(r==null?void 0:r.gqlMutation)??(r==null?void 0:r.gqlQuery);if(o)return{data:(await n.request(o,{input:{id:i,update:e}}))[s]};let{query:u,variables:l}=g.mutation({operation:s,fields:(r==null?void 0:r.fields)||["id"],variables:{input:{type:`UpdateOne${p(q(t),{pascalCase:!0})}Input`,required:!0,value:{id:i,update:e}}}});return{data:(await n.request(u,l))[s]}},updateMany:async({resource:t,ids:i,variables:e,meta:r})=>{let s=p(t,{pascalCase:!0}),o=`updateMany${s}`,u=O`
                mutation UpdateMany${s}($input: UpdateMany${s}Input!) {
                    ${o}(input: $input) {
                        updatedCount
                    }
                }
            `;await n.request(u,{input:{filter:{id:{in:i}},update:e}});let l=p(t),a,d;if(r!=null&&r.fields){let c=g.query({operation:l,fields:[{nodes:(r==null?void 0:r.fields)||["id"]}],variables:{filter:{type:p(`${q(t)}Filter`,{pascalCase:!0}),required:!0,value:{id:{in:i}}}}});a=c.query,d=c.variables}else a=O`
                    query GetMany${s}($filter: ${q(s)}Filter!) {
                        ${l}(filter: $filter) {
                            nodes {
                                id
                            }
                        }
                    }
                `,d={filter:{id:{in:i}}};return{data:(await n.request(a,d))[l].nodes}},getOne:async({resource:t,id:i,meta:e})=>{let r=p(q(t)),s=(e==null?void 0:e.gqlQuery)??(e==null?void 0:e.gqlMutation);if(s){let a=s,d={id:i};if(S(s)){let c=C(s);a=O`
                        query Get${p(q(t),{pascalCase:!0})}($id: ID!) {
                            ${r}(id: $id) {
                            ${c}
                            }
                        }
                    `}return{data:(await n.request(a,d))[r]}}let{query:o,variables:u}=g.query({operation:r,fields:(e==null?void 0:e.fields)||["id"],variables:{id:{type:"ID",required:!0,value:i}}});return{data:(await n.request(o,u))[r]}},deleteOne:async({resource:t,id:i,meta:e})=>{let r=p(q(t),{pascalCase:!0}),s=`deleteOne${r}`;if(e!=null&&e.gqlMutation)return{data:(await n.request(e.gqlMutation,{input:{id:i}}))[s]};let o=O`
                    mutation DeleteOne${r}($input: DeleteOne${r}Input!) {
                        ${s}(input: $input) {
                            id
                        }
                    }
                `;return{data:(await n.request(o,{input:{id:i}}))[s]}},deleteMany:async({resource:t,ids:i})=>{let e=p(t,{pascalCase:!0}),r=`deleteMany${e}`,s=O`
                mutation DeleteMany${e}($input: DeleteMany${e}Input!) {
                    ${r}(input: $input) {
                        deletedCount
                    }
                }
            `,o={input:{filter:{id:{in:i}}}};return await n.request(s,o),{data:[]}},getApiUrl:()=>{throw Error("Not implemented on refine-nestjs-query data provider.")},custom:async({url:t,method:i,headers:e,meta:r})=>{t&&n.setEndpoint(t),e&&n.setHeaders(e);let s=(r==null?void 0:r.gqlMutation)??(r==null?void 0:r.gqlQuery);if(s)return{data:await n.request(s,(r==null?void 0:r.variables)??{})};if(r!=null&&r.rawQuery)return{data:await n.request(r.rawQuery,r.variables)};if(r){if(r.operation){let o,u;if(i==="get"){let a=g.query({operation:r.operation,fields:r.fields,variables:r.variables});o=a.query,u=a.variables}else{let a=g.mutation({operation:r.operation,fields:r.fields,variables:r.variables});o=a.query,u=a.variables}return{data:(await n.request(o,u))[r.operation]}}throw Error("GraphQL operation name required.")}throw Error("GraphQL needs operation, fields and variables values in meta object.")}}),B=A;var se=n=>{let t=(i,e,r,s,o,u,l)=>{let a=M(i,{callback:e,params:r,meta:s},o);l.push(a)};return{subscribe({callback:i,params:e,meta:r}){let{resource:s,subscriptionType:o}=e??{};if(!r||!o||!s)throw new Error("[useSubscription]: `meta`, `subscriptionType` and `resource` are required in `params` for graphql subscriptions");let u=[];return(e==null?void 0:e.subscriptionType)==="useList"&&["created","updated","deleted"].forEach(a=>t(n,i,e,r,a,s,u)),(e==null?void 0:e.subscriptionType)==="useOne"&&t(n,i,e,r,"updated",s,u),()=>{u.forEach(a=>a())}},unsubscribe(i){i()}}};import*as fe from"gql-query-builder";import{batchRequests as ge,gql as ye,GraphQLClient as be,rawRequest as $e,request as ve,resolveRequestDocument as Ce}from"graphql-request";import*as Oe from"graphql-ws";var ae=B;export{be as GraphQLClient,ge as batchRequests,ae as default,ye as gql,Oe as graphqlWS,se as liveProvider,fe as qqlQueryBuilder,$e as rawRequest,ve as request,Ce as resolveRequestDocument};
//# sourceMappingURL=index.mjs.map