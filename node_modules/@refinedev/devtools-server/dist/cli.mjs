#!/usr/bin/env node
var P=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(t,r)=>(typeof require<"u"?require:t)[r]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+e+'" is not supported')});import Fe from"express";import{DevtoolsEvent as d,receive as v,send as m}from"@refinedev/devtools-shared";import te from"express";import b from"path";var w=e=>{e.use(te.static(b.join(__dirname,"client"))),e.use((t,r,n)=>{if(t.path.startsWith("/api")||t.path.startsWith("/open-in-editor"))return n();r.status(200).sendFile(b.join(`${__dirname}/client/index.html`))})};import ne from"ws";var h="https://cloud2.refine.dev",O="https://raw.githubusercontent.com/refinedev/refine/master/packages/devtools-server/FEED.md";import{DevtoolsEvent as oe,send as ie}from"@refinedev/devtools-shared";import{bold as S,cyanBright as I}from"chalk";var D=()=>{let e=new ne.Server({port:5002}).on("error",t=>{(t==null?void 0:t.code)==="EADDRINUSE"?console.error(`
${I.bold("\u2717 ")}${S("refine devtools")} failed to start. Port ${5002} is already in use, please make sure no other devtools server is running
`):console.error(`
${I.bold("\u2717 ")}${S("error from refine devtools")}`,t),process.exit(1)});return e.on("connection",t=>{ie(t,oe.DEVTOOLS_HANDSHAKE,{url:`http://localhost:${5001}`}),t.on("close",()=>{t.terminate()})}),process.on("SIGTERM",()=>{e.close(()=>{})}),e};import"lodash";import"@refinedev/devtools-shared";import"ws";var L=()=>0;import{bold as R,cyanBright as y}from"chalk";var x=e=>{let t=e.listen(5001,()=>{}).on("error",r=>{(r==null?void 0:r.code)==="EADDRINUSE"?console.error(`
${y.bold("\u2717 ")}${R("refine devtools")} failed to start. Port ${5001} is already in use, please make sure no other devtools server is running
`):console.error(`
${y.bold("\u2717 ")}${R("error from refine devtools")}`,r),process.exit(1)}).on("listening",()=>{console.log(`
${y.bold("\u2713 ")}${R("refine devtools")} is running at port ${y.bold(5001)}
`)});process.on("SIGTERM",()=>{t.close(()=>{})})};var ae={connectedApp:null,clientWs:null,devtoolsWsClients:[],appWsClients:[],activities:[],packages:[]},j=()=>({...ae});import{json as be}from"express";import we from"lodash-es/uniq.js";import se from"node-fetch";import ce from"gray-matter";import{marked as T}from"marked";import k from"sanitize-html";var le=e=>e.split("---section").slice(1).map(r=>`---section${r}`),de=e=>{let t=new T.Renderer;t.link=function(...n){return T.Renderer.prototype.link.apply(this,n).replace(/^<a/,'<a target="_blank" rel="noopener noreferrer"')};let r=T(e,{renderer:t});return k(r,{allowedTags:k.defaults.allowedTags.concat(["img"]),allowedAttributes:{...k.defaults.allowedAttributes,img:["src"]}})},pe=e=>{let t=ce(e.replace("---section","---"));return{...t.data,content:de(t.content)}},me=async()=>{try{return(await se(O)).text()}catch{return""}},C=async()=>{try{let e=await me();return le(e).map(pe)}catch{return[]}};import ve from"fs";import fe from"path";import ue from"globby";var N=async e=>{try{let t=await ue(`node_modules/${e}/package.json`,{onlyFiles:!0}),r=null;try{let n=P.resolve(fe.join(e,"package.json"));n&&(r=n)}catch{}return[...t,...r?[r]:[]][0]??null}catch{return null}};var V=async e=>{try{let t=await N(e);if(!t)return null;let r=JSON.parse(ve.readFileSync(t,{encoding:"utf-8"}));return{name:r.name,version:r.version,description:r.description}}catch{return null}};import ge from"path";import{readJSON as Pe}from"fs-extra";var _=async(e=process.cwd())=>{let t=await Pe(ge.join(e,"package.json"),{encoding:"utf-8"});return Object.keys(t.dependencies).filter(n=>n.startsWith("@refinedev/"))};var U=e=>e.replace("@refinedev/","https://c.refine.dev/");var F=e=>"https://refine.dev/docs/api-reference/general-concepts/";var $=async e=>{try{let t=await _(e);return await Promise.all(t.map(async n=>{let s=await V(n);return{name:n,currentVersion:s==null?void 0:s.version,description:s==null?void 0:s.description,changelog:U(n),documentation:F(n)}}))}catch{return[]}};import l from"dedent";var he=[{name:"@refinedev/ably",description:"Ably integration for refine",install:"npm install @refinedev/ably",usage:l(`
            import { liveProvider, Ably } from "@refinedev/ably";

            export const ablyClient = new Ably.Realtime("YOUR_API_TOKEN");

            const App = () => {
                return (
                    <Refine
                        liveProvider={liveProvider(ablyClient)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
        `.trim())},{name:"@refinedev/airtable",description:"Airtable integration for refine",install:"npm install @refinedev/airtable",usage:l(`
            import dataProvider from "@refinedev/airtable";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_KEY", "BASE_ID")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/antd",description:"Ant Design integration for refine",install:"npm install @refinedev/antd antd",usage:l(`
            import { ThemedLayoutV2 } from "@refinedev/antd";

            import "@refinedev/antd/dist/reset.css";

            const App = () => {
                return (
                    <Refine
                        /* ... */
                    >
                        <ThemedLayoutV2>
                            {/* ... */}
                        </ThemedLayoutV2>
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/appwrite",description:"Appwrite integration for refine",install:"npm install @refinedev/appwrite",usage:l(`
            import { dataProvider, liveProvider, Account, Appwrite, Storage } from "@refinedev/appwrite";

            const appwriteClient = new Appwrite();
            appwriteClient.setEndpoint("API_URL").setProject("PROJECT_ID");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(appwriteClient, { databaseId: "default" })}
                        liveProvider={liveProvider(appwriteClient, { databaseId: "default" })}
                        /* ... */
                    >
                        <ThemedLayout>
                            {/* ... */}
                        </ThemedLayout>
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/chakra-ui",description:"Chakra UI integration for refine",install:"npm install @refinedev/chakra-ui @chakra-ui/react @emotion/react @emotion/styled framer-motion @tabler/icons-react",usage:l(`
            import { ThemedLayoutV2 } from "@refinedev/chakra-ui";
            import { ChakraProvider } from "@chakra-ui/react";

            const App = () => {
                return (
                        <ChakraProvider>
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </ChakraProvider>
                );
            };
            `.trim())},{name:"@refinedev/graphql",description:"GraphQL integration for refine",install:"npm install @refinedev/graphql",usage:l(`
            import dataProvider, { GraphQLClient } from "@refinedev/graphql";

            const client = new GraphQLClient("YOUR_API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(client)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/hasura",description:"GraphQL integration for refine",install:"npm install @refinedev/hasura",usage:l(`
            import dataProvider, { GraphQLClient } from "@refinedev/hasura";

            const client = new GraphQLClient("HASURA_API_URL", {
                headers: {
                    "x-hasura-role": "public",
                },
            });

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(client)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/inferencer",description:"Auto generate views based on your APIs with refine",install:"npm install @refinedev/inferencer",usage:l(`
        import { AntdInferencer } from "@refinedev/inferencer/antd";

        const App = () => {
            return (
                <Refine
                    /* ... */
                >
                    <AntdInferencer action="list" resource="posts" />
                </Refine>
            );
        };
        `.trim())},{name:"@refinedev/kbar",description:"Command palette integration with kbar for refine",install:"npm install @refinedev/kbar",usage:l(`
            import { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";

            const App = () => {
                return (
                    <RefineKbarProvider>
                        <Refine
                            /* ... */
                        >
                            <RefineKbar />
                        </Refine>
                    </RefineKbarProvider>
                );
            };
        `.trim())},{name:"@refinedev/mantine",description:"Mantine UI integration for refine",install:"npm install @refinedev/mantine @refinedev/react-table @mantine/core @mantine/hooks @mantine/form @mantine/notifications @emotion/react @tabler/icons-react",usage:l(`
            import { ThemedLayoutV2 } from "@refinedev/mantine";
            import { MantineProvider } from "@mantine/core";

            const App = () => {
                return (
                    <MantineProvider>
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </MantineProvider>
                );
            };
            `.trim())},{name:"@refinedev/medusa",description:"Medusa store integration for refine",install:"npm install @refinedev/medusa",usage:l(`
            import dataProvider, { authProvider } from "@refinedev/medusa";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        authProvider={authProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/mui",description:"Material UI integration for refine",install:"npm install @refinedev/mui @refinedev/react-hook-form @mui/material @mui/lab @mui/x-data-grid @emotion/react @emotion/styled react-hook-form",usage:l(`
            import { ThemedLayoutV2 } from "@refinedev/mui";

            import CssBaseline from "@mui/material/CssBaseline";
            import GlobalStyles from "@mui/material/GlobalStyles";
            import { ThemeProvider } from "@mui/material/styles";

            const App = () => {
                return (
                    <ThemeProvider>
                        <CssBaseline />
                        <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />
                        <Refine
                            /* ... */
                        >
                            <ThemedLayoutV2>
                                {/* ... */}
                            </ThemedLayoutV2>
                        </Refine>
                    </ThemeProvider>
                );
            };
            `.trim())},{name:"@refinedev/nestjs-query",description:"NestJS Query data provider integration for refine",install:"npm install @refinedev/nestjs-query graphql-ws",usage:l(`
            import dataProvider, {
                GraphQLClient,
                liveProvider,
            } from "@refinedev/nestjs-query";

            import { createClient } from "graphql-ws";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(new GraphQLClient( "API_URL" ))}
                        liveProvider={liveProvider(createClient({ url: "WS_URL" }))}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/nestjsx-crud",description:"NestJSX CRUD data provider integration for refine",install:"npm install @refinedev/nestjsx-crud",usage:l(`
            import dataProvider from "@refinedev/nestjsx-crud";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/react-hook-form",description:"React Hook Form integration for refine",install:"npm install @refinedev/react-hook-form react-hook-form",usage:l(`
            import { useForm } from "@refinedev/react-hook-form";

            const EditPost = () => {
                const {
                    register,
                    handleSubmit,
                    formState,
                    refineCore,
                } = useForm({
                    refineCoreProps: {
                        resource: "posts",
                        id: "1",
                    },
                });

                return /* ... */
            };
            `.trim())},{name:"@refinedev/react-table",description:"Tanstack React Table integration for refine",install:"npm install @refinedev/react-table @tanstack/react-table",usage:l(`
            import { useTable } from "@refinedev/react-table";

            import { ColumnDef, flexRender } from "@tanstack/react-table";

            const EditPost = () => {
                const columns = React.useMemo<ColumnDef<IPost>[]>(
                    () => [
                        {
                            id: "id",
                            header: "ID",
                            accessorKey: "id",
                        },
                        {
                            id: "title",
                            header: "Title",
                            accessorKey: "title",
                            meta: {
                                filterOperator: "contains",
                            },
                        },
                ], []);

                const tableInstance = useTable({
                    columns,
                    refineCoreProps: {
                        resource: "posts",
                    }
                });

                return /* ... */
            };
            `.trim())},{name:"@refinedev/simple-rest",description:"Data provider integration for REST APIs with refine",install:"npm install @refinedev/simple-rest",usage:l(`
            import dataProvider from "@refinedev/simple-rest";

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider("API_URL")}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/supabase",description:"Data provider and live provider integrations for Supabase with refine",install:"npm install @refinedev/supabase",usage:l(`
            import { dataProvider, liveProvider, createClient } from "@refinedev/supabase";

            const supabaseClient = createClient("SUPABASE_URL", "SUPABASE_KEY");

            const App = () => {
                return (
                    <Refine
                        dataProvider={dataProvider(supabaseClient)}
                        liveProvider={liveProvider(supabaseClient)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/strapi",description:"Strapi integration of refine",install:"npm install @refinedev/strapi axios",usage:l(`
            import { DataProvider, AuthHelper } from "@refinedev/strapi";

            const axiosInstance = axios.create();
            const strapiAuthHelper = AuthHelper("API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={DataProvider("API_URL", axiosInstance)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())},{name:"@refinedev/strapi-v4",description:"StrapiV4 integration of refine",install:"npm install @refinedev/strapi-v4 axios",usage:l(`
            import { DataProvider, AuthHelper } from "@refinedev/strapi-v4";

            const axiosInstance = axios.create();
            const strapiAuthHelper = AuthHelper("API_URL");

            const App = () => {
                return (
                    <Refine
                        dataProvider={DataProvider("API_URL", axiosInstance)}
                        /* ... */
                    >
                        {/* ... */}
                    </Refine>
                );
            };
            `.trim())}],H=async e=>{let t=await _(e);return he.filter(r=>!t.includes(r.name))};import ye from"preferred-pm";import _e from"execa";var M=async(e,t=process.cwd())=>{try{let{name:r}=await ye(t)??{name:"npm"},{failed:n}=await _e(r??"npm",["install",...e.map(s=>`${s}@latest`)]);return!n}catch{return!1}};import Ee from"execa";var W=async e=>{try{let{stdout:t}=await Ee("npm",["view",e,"name","version","--json"]);return JSON.parse(t)}catch{return{name:e}}};import{readJSON as Ae}from"fs-extra";import Re from"path";var E=async(e=process.cwd())=>{var t;try{let r=await Ae(Re.join(e,"package.json"),{encoding:"utf-8"}),n=(t=r==null?void 0:r.refine)==null?void 0:t.projectId;return n||!1}catch{return null}};import Te from"execa";var J=async(e,t=process.cwd())=>{try{return Te.sync("npm",["pkg","set",`refine.projectId=${e}`],{cwd:t}),!0}catch{return null}};import ke from"execa";import G from"path";var q=async(e,t=process.cwd())=>{try{let r=P.resolve(".bin/jscodeshift"),n=ke.sync(r,["./","--extensions=ts,tsx,js,jsx","--parser=tsx",`--transform=${G.resolve(G.join(__dirname,"..","src","project-id","transform.ts"))}`,"--ignore-pattern=**/.cache/**","--ignore-pattern=**/node_modules/**","--ignore-pattern=**/build/**","--ignore-pattern=**/dist/**","--ignore-pattern=**/.next/**",`--__projectId=${e}`],{cwd:t,timeout:1e3*10});n.stderr&&console.error(n.stderr)}catch(r){console.error(r)}};var B=async(e,t=process.cwd())=>{try{return await Promise.all([J(e,t),q(e,t)]),!0}catch{return!1}};var K=(e,t)=>{e.use("/api",be()),e.get("/api/connected-app",(a,o)=>{o.json({url:t.connectedApp})}),e.get("/api/activities",(a,o)=>{let{offset:c=0,limit:p=t.activities.length}=a.query;o.setHeader("x-total-count",t.activities.length),o.json({data:t.activities.slice(Number(c),Number(p))})}),e.get("/api/activities/reset",(a,o)=>{t.activities=[],o.json({success:!0})}),e.get("/api/unique-trace-items",(a,o)=>{o.header("Access-Control-Allow-Origin","*"),o.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept");let c=t.activities.flatMap(f=>{var g;return((g=f.trace)==null?void 0:g.map(ee=>ee.function).filter(Boolean))??[]}),p=we(c);o.setHeader("x-total-count",p.length),o.json({data:p})});let r=null;e.get("/api/installed-packages",async(a,o)=>{let{force:c}=a.query??{};(!r||c)&&(r=await $()),o.header("x-total-count",`${r.length}`),o.json({data:r})});let n=null;e.get("/api/available-packages",async(a,o)=>{n||(n=await H()),o.header("x-total-count",`${n.length}`),o.json({data:n})});let s=new Map;e.get("/api/packages/:packageName/latest",async(a,o)=>{let{packageName:c}=a.params??{};if(!c){o.status(400).json({error:"Package name is required"});return}if(!s.has(c)){let p=await W(c);s.set(c,p)}return o.json({data:s.get(c)})}),e.post("/api/packages/install",async(a,o)=>{let{packages:c}=a.body??{};if((c==null?void 0:c.length)===0){o.status(400).json({error:"Package name is required"});return}await M(c)?(r=null,n=null,o.status(200).json({success:!0})):o.status(400).json({success:!1,error:"Failed to update package"})});let i=null;e.get("/api/feed",async(a,o)=>{i||(i=await C()),o.header("x-total-count",`${i.length}`),o.json({data:i})}),e.get("/api/project-id/status",async(a,o)=>{let c=await E();if(c){o.status(200).json({projectId:c});return}if(c===!1){o.status(404).json({projectId:null});return}o.status(500).json({projectId:null})}),e.post("/api/project-id/update",async(a,o)=>{let{projectId:c}=a.body??{};if(!c){o.status(400).json({error:"Project ID is required"});return}if(await B(c)){o.status(200).json({success:!0});return}o.status(500).json({success:!1,error:"Failed to update project ID"})})};import{readJSON as Oe,writeJSON as Se}from"fs-extra";import{FrontendApi as Ie}from"@ory/client";import{createProxyMiddleware as Q}from"http-proxy-middleware";import Y from"path";var A=null,De=async(e,t,r)=>{A||(A=await E()),A&&(e.headers["x-project-id"]=A),r()},Le=(e,t)=>{if(t.body){let r=JSON.stringify(t.body);e.setHeader("Content-Type","application/json"),e.setHeader("Content-Length",Buffer.byteLength(r)),e.write(r)}},xe=async e=>{try{let t=`${h}/.auth`,r=new Ie({isJsonMime:()=>!0,basePath:t,baseOptions:{withCredentials:!0}}),{data:n}=await r.toSession({xSessionToken:e,tokenizeAs:"jwt_template_1"});return n==null?void 0:n.tokenized}catch{}},je=async(e,t)=>{try{Se(Y.join(__dirname,"..",".persist.json"),{token:e,jwt:t})}catch{}},Ce=async()=>{try{return await Oe(Y.join(__dirname,"..",".persist.json"))}catch{}return{token:void 0,jwt:void 0}},Ne=e=>(t,r)=>{if(r.url.includes("self-service/logout/api")){let n=JSON.stringify({session_token:e});t.setHeader("Content-Length",Buffer.byteLength(n)),t.write(n)}},Ve=e=>(t,r,n)=>{let s="";t.on("data",i=>{s+=i}),t.on("end",()=>{var a;let i;try{i=JSON.parse(s).session_token}catch{}if(!i){if((a=s==null?void 0:s.includes)!=null&&a.call(s,"an+account+with+the+same+identifier")){n.redirect("/after-login?error=An+account+with+the+same+identifier+exists+already");return}n.redirect("/after-login?error=Invalid-session-token");return}xe(i).then(o=>{e(i,o??""),n.redirect("/after-login")})})},z=async e=>{let{token:t,jwt:r}=await Ce(),n=Q({target:h,changeOrigin:!0,pathRewrite:{"^/api/.auth":"/.auth"},cookieDomainRewrite:{"refine.dev":"localhost"},logLevel:"silent",headers:{"auth-base-url-rewrite":`http://localhost:${5001}/api/.auth`},selfHandleResponse:!0,onProxyReq:(i,a,...o)=>{t&&(i.setHeader("X-Session-Token",t??""),Ne(t)(i,a,...o))},onProxyRes:(i,a,o)=>{var p;let c=(p=i.headers["set-cookie"])==null?void 0:p.map(f=>f.replace("Domain=refine.dev;","Domain=localhost;").replace(" HttpOnly; Secure; SameSite=Lax",""));if(c&&(i.headers["set-cookie"]=c),a.url.includes("self-service/methods/oidc/callback"))return Ve((f,g)=>{t=f,r=g,je(t,r)})(i,a,o);o.writeHead(i.statusCode||500,i.headers),i.pipe(o,{end:!0})}});e.use("/api/.auth",n);let s=Q({target:h,secure:!1,changeOrigin:!0,logLevel:"silent",pathRewrite:{"^/api/.refine":"/.refine"},onProxyReq:(i,...a)=>{r&&(i.setHeader("Authorization",`Bearer ${r}`),i.removeHeader("cookie")),Le(i,...a)}});e.use("/api/.refine",De,s)};import Ue from"path";var X=(e,t)=>{e.get("/open-in-editor/*",(r,n)=>{let{line:s,column:i}=r.query,a=r.path.replace("/open-in-editor",""),o=`vscode://file/${Ue.join(t,a)}?${s?`line=${s}`:""}${i?`&column=${i}`:""}`;n.redirect(o)})};var Z=async({projectPath:e=process.cwd()}={})=>{let t=Fe(),r=D(),n=j();r.on("connection",s=>{v(s,d.DEVTOOLS_INIT,i=>{n.connectedApp?m(s,d.DEVTOOLS_ALREADY_CONNECTED,{url:n.connectedApp}):(n.connectedApp=i.url,n.clientWs=s,r.clients.forEach(a=>{m(a,d.DEVTOOLS_CONNECTED_APP,{url:n.connectedApp})}))}),v(s,d.ACTIVITY,i=>{let a=n.activities.findIndex(c=>c.identifier===i.identifier),o={...i,createdAt:Date.now(),updatedAt:Date.now()};a>-1?(o.createdAt=n.activities[a].createdAt,n.activities[a]=o):n.activities.push(o),r.clients.forEach(c=>{m(c,d.DEVTOOLS_ACTIVITY_UPDATE,{updatedActivities:[o]})})}),v(s,d.DEVTOOLS_HIGHLIGHT_IN_MONITOR,({name:i})=>{r.clients.forEach(a=>{m(a,d.DEVTOOLS_HIGHLIGHT_IN_MONITOR_ACTION,{name:i})})}),v(s,d.DEVTOOLS_INVALIDATE_QUERY,({queryKey:i})=>{r.clients.forEach(a=>{m(a,d.DEVTOOLS_INVALIDATE_QUERY_ACTION,{queryKey:i})})}),v(s,d.DEVTOOLS_LOGIN_SUCCESS,()=>{r.clients.forEach(i=>{m(i,d.DEVTOOLS_RELOAD_AFTER_LOGIN,{})})}),s.on("close",(i,a)=>{n.clientWs&&(r.clients.has(n.clientWs)||(n.clientWs=null,n.connectedApp=null,n.activities=[],r.clients.forEach(o=>{m(o,d.DEVTOOLS_DISCONNECTED_APP,{url:n.connectedApp})})))})}),L(r),w(t),x(t),K(t,n),z(t),X(t,e)};Z();
//# sourceMappingURL=cli.mjs.map